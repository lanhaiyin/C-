/**
 * Definition for binary tree
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
    //分成三部分，根据中序和前序将树划分为三个部分，左子树又有前序和中序，继续分治
    TreeNode* fun(vector<int>pre,int pre_start,int pre_end,vector<int>vin,int vin_start,int vin_end)
    {
       
        TreeNode *root=new TreeNode(pre[pre_start]);
        for(int i=vin_start;i<=vin_end;i++)
        {
            if(vin[i]==pre[pre_start])
            {
                //找到了根
                 if(pre_start>pre_end||vin_start>vin_end)
            return nullptr;
               root->left=fun(pre,pre_start+1,pre_start+i-vin_start,vin,vin_start,i-1);

                root->right=fun(pre,pre_start+i-vin_start+1,pre_end,vin,i+1,vin_end);
                  break;
            }
          
        }
        return root;
    }

    TreeNode* reConstructBinaryTree(vector<int> pre,vector<int> vin) {
         if (pre.empty() || vin.empty()){
            return nullptr;
         }
        return fun(pre,0,pre.size()-1,vin,0,vin.size()-1);

    }
};
