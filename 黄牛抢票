#include <stdio.h>
#include <unistd.h>
#include <pthread.h>
#define count 3
int tickets=100;
pthread_mutex_t lock;//定义互斥锁
void* thread_start(void *arg)
{
//    void(arg);
//访问临界资源count必须要加互斥锁，否则会使不同的线程访问同一临界资源，产生程序的二义性
        
   
    while(1)
    {
        pthread_mutex_lock(&lock);
        
        if(tickets>0)
        {
            printf("我是%p 号线程，我抢到第%d张票\n",pthread_self(),tickets);
            tickets--;
        
        }
        else
        {
            //必须在所有程序可能退出的出口解锁，否则会死锁
            pthread_mutex_unlock(&lock);
            break;
        
        }
        pthread_mutex_unlock(&lock);
    }
    
    return NULL;
}
int main()
{
    //创建多个线程
    pthread_t tid[count];
    pthread_mutex_init(&lock,NULL);
    int i=0;
    for(;i<count;i++)
    {
        int ret=pthread_create(&tid[i],NULL,thread_start,NULL);
        if(ret<0)
        {
            perror("pthread_create");
            return 0;
        }

    }
    //线程等待
    for(i=0;i<count;i++)
    {
        pthread_join(tid[i],NULL);
    }
    pthread_mutex_destroy(&lock);//销毁互斥锁，，静态的不需要销毁
sleep(5);
    return 0;
}
